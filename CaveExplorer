package GameCaveExplorer;

import static GameCaveExplorer.Direction.*;
import static GameCaveExplorer.Status.*;

/**
 * A CaveExplorer roams through a cave, searching for the cave EXIT (the goal of
 * the game) The cave has a number of features scattered around: WALL, FOOD,
 * KEY, DOOR, EXIT, PIT, MATCH, WATER, JACKET. The EXIT is behind a locked door
 * so the player has to find the key first. Matches are used to light up the
 * cave temporarily when looking around, and when they run out, the player won't
 * be able to see anything and would have to move around blindly JACKET can
 * saves a player's life when falling into WATER.
 * 
 * @author hayhmanoo map - map time - time clock energy - initial energy level
 *         foodItems - number of food items matches - number of matches boolean
 *         key - if the user has key (default false) boolean jacket - if the
 *         user has jacket (default false) location - initial location. boolean
 *         hasWon - if the user has won (default false)
 */
public class CaveExplorer {
	public static final int MAX_ENERGY = 100;
	private Map map;
	private int time;
	private int energy;
	private int foodItems;
	private int matches;
	private boolean key;
	private boolean jacket;
	private Location location;
	private boolean hasWon;

	/**
	 * same as the other constructors except that the initial clock time, energy,
	 * number of food items, number of matches, and initial location are all set by
	 * the user.
	 * 
	 * @param map
	 * @param clock
	 * @param energy
	 * @param foodItems
	 * @param matches
	 * @param initial
	 */
	public CaveExplorer(Map map, int clock, int energy, int foodItems, int matches, Location initial) {
		this.map = map;
		this.time = clock;
		this.energy = energy;
		this.foodItems = foodItems;
		this.matches = matches;
		location = initial;
		key = false;
		jacket = false;
		hasWon = false;
	}

	/**
	 * Place the player at the given initial location with max energy, time = 100, 1
	 * food item, and 10 matches mark the initial location at as PLAYER
	 * 
	 * @param map
	 * @param initial
	 */
	public CaveExplorer(Map map, Location initial) {
		this.map = map;
		location = initial;
		energy = MAX_ENERGY;
		time = 100;
		foodItems = 1;
		matches = 10;
		map.mark(location, PlAYER);
		key = false;
		jacket = false;
		hasWon = false;
	}

	/**
	 * the initial location must be picked as random carry 1 food item, 10 matches
	 * mark the status of the cell where the player is at as PLAYER
	 * 
	 * @param map
	 * @param generator - a given Random generator
	 */
	public CaveExplorer(Map map, java.util.Random generator) {
		this.map = map;
		location = map.getRandomOpenLocation(generator);
		energy = MAX_ENERGY;
		time = 100;
		foodItems = 1;
		matches = 10;
		key = false;
		jacket = false;
		hasWon = false;
		map.mark(location, PlAYER);
	}

	/**
	 * this method returns a list of resources that player currently has. this
	 * action consumes one unit of energy and the clock goes down by 1.
	 * 
	 * @return lists of resources that player currently has in String form
	 */
	public java.lang.String checkResource() {
		time--;
		energy--;
		return "Food itm: " + foodItems + "Matches: " + matches + "Key: " + key + "Jacket: " + jacket;
	}

	/**
	 * Eat method consumes one food item. It increases the energy by 10 (but not to
	 * surpass the MAX_ENERGY). the clock goes down by 1 each time this method is
	 * called, even when there is no food item.
	 */
	public void eat() {
		time = time - 1;
		if (foodItems == 0)
			return;
		if (foodItems > 0)
			foodItems--;
		if (energy < MAX_ENERGY)
			energy = Math.min(energy + 10, MAX_ENERGY);

	}

	/**
	 * return the clock time left
	 * 
	 * @return time
	 */
	public int getClock() {
		return time;
	}

	/**
	 * return the current energy level of the player
	 * 
	 * @return energy
	 */
	public int getEnergy() {
		return energy;
	}

	/**
	 * return the number of foodItem left
	 * 
	 * @return foodItmes
	 */
	public int getFoodItems() {
		return foodItems;
	}

	/**
	 * return the current location of the player
	 * 
	 * @return current location
	 */
	public Location getLocation() {
		return location;

	}

	/**
	 * return the map.
	 * 
	 * @return the map
	 */
	public Map getMap() {
		return map;

	}

	/**
	 * return the number of matches left
	 * 
	 * @return matches
	 */
	public int getMatches() {
		return matches;
	}

	/**
	 * return true if the player has the life jacket, false otherwise.
	 * 
	 * @return weather the player has jacket or not.
	 */
	public boolean hasJacket() {
		return jacket;
	}

	/**
	 * return true if the player has the key, which is needed to open the door.
	 * 
	 * @return weather the player has key or not
	 */
	public boolean hasKey() {
		return key;
	}

	/**
	 * return true if the player reaches the cave exit or the player has won.
	 * 
	 * @return weather the player has won or not.
	 */
	public boolean hasWon() {
		return hasWon;
	}

	/**
	 * the player is still in the game if the clock has not run out AND he still has
	 * energy.
	 * 
	 * @return weather the player is still alive
	 */
	public boolean isAlive() {
		if (time != 0 && energy != 0) {
			return true;
		}
		return false;
	}

	/**
	 * jump in the given direction. 
	 * The explorer will jump 3 steps in the given direction if energy is 75 or above 
	 * 2 steps if energy is 50 to 74, 
	 * 1 step if energy is less than 50, which moves him/her the same distance as a move()
	 * action does, but consumes more energy. The player cannot jump over WALL nor DOOR. 
	 * The player can jump and land on a DOOR only if he/she has the key. 
	 * Each jump consumes 25 units of energy even if it fails. Clock goes down by 1. 
	 * If the jump is successful, the Status of the current cell on the map is changed
	 * to "MARK" if it was PLAYER, and the Status of the new location is changed to
	 * "PLAYER" if it was OPEN or MARK.
	 * @param d direction to jump
	 * @return true of the jump is successful or false otherwise
	 */
	public boolean jump(Direction d) {
		time--;
		int distance = 0;
		int vertical = 0;
		int horizontal = 0;
		Location nowLocation = new Location(location);
		if (energy >= 75) {
			distance = 3;
		} else if (energy >= 50) {
			distance = 2;
		} else {
			distance = 1;
		}

		
		energy = Math.max(energy - 25, 0);

		if (d == NORTH) {
			vertical = -1;
		} else if (d == EAST) {
			horizontal = 1;
		} else if (d == SOUTH) {
			vertical = 1;
		} else {
			horizontal = -1;
		}
		
		for (int i = 0; distance > i; i++) {
			nowLocation.translate(vertical, horizontal);
			if (map.isWall(nowLocation) || (map.isDoor(nowLocation) && i != distance - 1)) {
				return false;
			}
			if (i == distance - 1 && map.isDoor(nowLocation) && key == false)
				return false;
		}
		
		if (map.getCellStatus(nowLocation) == WATER) {
			foodItems /= 2;
			matches /= 2;
			if (jacket == false) {
				energy = 0;
			}
		//	map.mark(location, Status.MARK);

			if (d == NORTH) {
				location.translate(-1, 0);
			}
			if (d == EAST) {
				location.translate(0, 1);
			}
			if (d == SOUTH) {
				location.translate(1, 0);
			}
			if (d == WEST) {
				location.translate(0, -1);
			}
		}
		
		if (map.getCellStatus(location) == PlAYER) {
			map.mark(location, MARK);
		}
	
		location = nowLocation;
		if (map.getCellStatus(location) == OPEN || map.getCellStatus(location) == MARK) {
			map.mark(location, PlAYER);
		}
		
		return true;
		
	}

	/**
	 * Look towards the given direction. If no match is left, return "DARKNESS",
	 * otherwise return the status of the neighboring cell in the given direction.
	 * Use Status' toString method to get a String representation of a Status. The
	 * action consumes one match (if any) and one energy. The clock goes down by 1.
	 * 
	 * @param d direction that the player look to
	 * @return what is visible in the given direction
	 */
	public String look(Direction d) {
		if (matches > 0) {
			energy--;
			time--;
			matches--;
			Location nowLocation = new Location(location);
			if (d == NORTH) {
				nowLocation.translate(-1, 0);
			}
			if (d == EAST) {
				nowLocation.translate(0, 1);
			}
			if (d == SOUTH) {
				nowLocation.translate(1, 0);
			}
			if (d == WEST) {
				nowLocation.translate(0, -1);
			}
			return map.getCellStatus(nowLocation).toString();
		} else {
			energy--;
			time--;
			return "DARKNESS";
		}
	}

	/**
	 * move one step towards the given direction. The move fails if the next
	 * location is WALL, or it is a DOOR and the player does not have the key. In
	 * each move attempt (even if it fails), one unit of energy is consumed, clock
	 * runs down by 1. If the move is successful, the Status of the current cell is
	 * changed to "MARK" on the map if it was PLAYER, and the Status of the new
	 * location is changed to "PLAYER" if it was OPEN or MARK. The player loses all
	 * his/her energy if the new location is a PIT or WATER (without a JACKET). If
	 * the new location is WATER, the player loses half of his food items and his
	 * matches whether he has life JACKET or not.
	 * 
	 * @param d - direction
	 * @return true if the player can make the move
	 */
	public boolean move(Direction d) {
		if (energy <= 1) {
			return false;
		}
	
		energy--;
		time--;
		Location nowLocation = new Location(location);
		if (d == NORTH) {
			nowLocation.translate(-1, 0);
		}
		if (d == EAST) {
			nowLocation.translate(0, 1);
		}
		if (d == SOUTH) {
			nowLocation.translate(1, 0);
		}
		if (d == WEST) {
			nowLocation.translate(0, -1);
		}
		if (map.isWall(nowLocation)) {
			return false;
		}
		if (map.isDoor(nowLocation)) {
			if (!key) {
				return false;
			}
			map.mark(nowLocation, OPEN);
			map.mark(location, Status.MARK);

			if (d == NORTH) {
				location.translate(-1, 0);
			}
			if (d == EAST) {
				location.translate(0, 1);
			}
			if (d == SOUTH) {
				location.translate(1, 0);
			}
			if (d == WEST) {
				location.translate(0, -1);
			}
			map.mark(location, Status.PlAYER);
		}

		if (map.getCellStatus(nowLocation) == WATER) {
			foodItems /= 2;
			matches /= 2;
			if (jacket == false) {
				energy = 0;
			}
		//	map.mark(location, Status.MARK);

			if (d == NORTH) {
				location.translate(-1, 0);
			}
			if (d == EAST) {
				location.translate(0, 1);
			}
			if (d == SOUTH) {
				location.translate(1, 0);
			}
			if (d == WEST) {
				location.translate(0, -1);
			}
		}

		if (map.getCellStatus(nowLocation) == PIT) {
			energy = 0;
		//	map.mark(location, Status.MARK);

			if (d == NORTH) {
				location.translate(-1, 0);
			}
			if (d == EAST) {
				location.translate(0, 1);
			}
			if (d == SOUTH) {
				location.translate(1, 0);
			}
			if (d == WEST) {
				location.translate(0, -1);
			}
		} else {
			map.mark(location, Status.MARK);

			if (d == NORTH) {
				location.translate(-1, 0);
			}
			if (d == EAST) {
				location.translate(0, 1);
			}
			if (d == SOUTH) {
				location.translate(1, 0);
			}
			if (d == WEST) {
				location.translate(0, -1);
			}
			if (map.getCellStatus(location) == OPEN || map.getCellStatus(location) == MARK)
				map.mark(location, PlAYER);

		}

		return true;

	}

	/**
	 * If there is a key, or jacket, or food, or match on the current location,
	 * calling this method will pick up the item (20 of them, in the case of
	 * matches) the Status of the current cell on the map is changed to "PLAYER",
	 * otherwise do nothing. The player's clock and energy is not affected by this
	 * action.
	 */
	public void pickUp() {

		if (map.getCellStatus(location) == FOOD) {
			foodItems++;
		}
		if (map.getCellStatus(location) == KEY) {
			key = true;
		}
		if (map.getCellStatus(location) == JACKET) {
			jacket = true;
		}
		if (map.getCellStatus(location) == MATCH) {
			matches = matches + 20;
		}
	}

	/**
	 * Taking a rest increases the energy by 10 (but not to surpass the MAX_ENERGY).
	 * The clock goes down by 10 each time this action is taken.
	 */
	public void rest() {
		time = time - 10;
		if (energy < MAX_ENERGY) {
			energy = Math.min(energy + 10, MAX_ENERGY);

		}

	}
}
